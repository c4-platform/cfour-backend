from rest_framework.serializers import Serializer, ModelSerializerfrom rest_framework import serializersfrom django.core.exceptions import ValidationErrorfrom core.utils.utils import create_random_otpfrom cfour_backend.redis import REDIS_CONNECTIONfrom cfour_backend import settingsfrom core.actions.messages import VerificationSMSfrom .models import Userfrom django.core.cache import cachefrom .authentication import create_user_tokenclass GetPhoneNumberSerializer(Serializer):    phone_number = serializers.CharField(max_length=13, min_length=11, required=True)    def validate_phone_number(self):        if len(self.phone_number) < 11:            raise ValidationError(message="cannot have phone number length with less than 11 digits.")    def create(self, validated_data):        phone_number = validated_data['phone_number']        otp_generated_code = create_random_otp()        REDIS_CONNECTION.set(phone_number, otp_generated_code, ex=settings.EXPIRATION_TIMES)        VerificationSMS(otp_generated_code, phone_number).send()        return {            'expiration_time': settings.EXPIRATION_TIMES        }class UserSerializer(ModelSerializer):    otp = serializers.CharField(write_only=True, max_length=4, min_length=4)    phone_number = serializers.CharField(max_length=13, min_length=11)    class Meta:        model = User        fields = ['id', 'phone_number', 'otp']    @staticmethod    def validate_otp(value):        if len(value) != 4:            raise ValidationError(message="Ensure this field has exactly 4 characters.")        return value    @staticmethod    def validate_phone_number(value):        if len(value) != 11:            raise ValidationError(message="Ensure this field has exactly 11 characters.")        return value    def create(self, validated_data):        phone_number = validated_data['phone_number']        otp = validated_data['otp']        code = REDIS_CONNECTION.get(phone_number)        if settings.NO_MORE_TRY:            cache_key = f"{phone_number}_attempts"            attempts = cache.get(cache_key)            if not attempts:                attempts = 0            if attempts > 3:                raise ValidationError(message="to many requests for validation.")            cache.set(cache_key, attempts + 1, timeout=300)        if code:            if code == otp and settings.DEBUG or otp == settings.DEFAULT_OTP_CODE:                user, created = User.objects.get_or_create(phone_number=phone_number)                data = create_user_token(user)                user_serializer = UserSerializer(user)                response = {                    'user': user_serializer,                    'access_token': str(data['access_token']),                    'refresh_token': str(data['refresh_token']),                    'access_lifetime': settings.ACCESS_TOKEN_LIFETIME,                    'refresh_lifetime': settings.REFRESH_TOKEN_LIFETIME,                    'next': "/games"                }                if created:                    response['next'] = '/users/personal-info'                REDIS_CONNECTION.delete(phone_number)                cache.delete(cache_key)                return response        else:            raise ValidationError(message="code expired!")